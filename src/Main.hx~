@:uiComp("button")
    class ButtonComp extends h2d.Flow implements h2d.domkit.Object {

	static var SRC = <button>
	    <text public id="labelTxt" />
	    </button>

	    public var label(get, set): String;
	function get_label() return labelTxt.text;
	function set_label(s) {
	    labelTxt.text = s;
	    return s;
	}

	public function new( ?parent ) {
	    super(parent);
	    initComponent();
	    enableInteractive = true;
	    interactive.onClick = function(_) onClick();
	    interactive.onOver = function(_) {
		dom.hover = true;
	    };
	    interactive.onPush = function(_) {
		dom.active = true;
	    };
	    interactive.onRelease = function(_) {
		dom.active = false;
	    };
	    interactive.onOut = function(_) {
		dom.hover = false;
	    };
	}

	public dynamic function onClick() {
	}
    }

@:uiComp("container")
    class ContainerComp extends h2d.Flow implements h2d.domkit.Object {

	static var SRC = <container>
	    <button public id="btn"/>
	    <input public id="host"/>
	    </container>;

	public function new(align:h2d.Flow.FlowAlign, ?parent) {
	    super(parent);
	    initComponent();
	}

    }

using Main.Key;

class Key {
    static public function getKeyFromChar(c:String):Int {
	return switch(c) {
	case "Backspace": BACKSPACE;
	case "Tab": TAB;
	case "Enter": ENTER;
	case "Shift": SHIFT;
	case "Ctrl": CTRL;
	case "Alt": ALT;
	case "Escape": ESCAPE;
	case "Space": SPACE;
	case "PageUp": PGUP;
	case "PageDown": PGDOWN;
	case "End": END;
	case "Home": HOME;
	case "Left": LEFT;
	case "Up": UP;
	case "Right": RIGHT;
	case "Down": DOWN;
	case "Insert": INSERT;
	case "Delete": DELETE;
	case "NumPad*": NUMPAD_MULT;
	case "NumPad+": NUMPAD_ADD;
	case "NumPadEnter": NUMPAD_ENTER;
	case "NumPad-" : NUMPAD_SUB;
	case "NumPad.": NUMPAD_DOT;
	case "NumPad/": NUMPAD_DIV;
	case "LShift": LSHIFT;
	case "RShift": RSHIFT;
	case "LCtrl": LCTRL;
	case "RCtrl": RCTRL;
	case "LAlt": LALT;
	case "RAlt": RALT;
	case "Tilde": QWERTY_TILDE;
	case "Minus": QWERTY_MINUS;
	case "Equals": QWERTY_EQUALS;
	case "BracketLeft": QWERTY_BRACKET_LEFT;
	case "BacketRight": QWERTY_BRACKET_RIGHT;
	case "Semicolon": QWERTY_SEMICOLON;
	case "Quote": QWERTY_QUOTE;
	case "Backslash": QWERTY_BACKSLASH;
	case "Comma": QWERTY_COMMA;
	case "Period": QWERTY_PERIOD;
	case "Slash": QWERTY_SLASH;
	case "IntlBackslash": INTL_BACKSLASH;
	case "LeftWindowKey": LEFT_WINDOW_KEY;
	case "RightWindowKey": RIGHT_WINDOW_KEY;
	case "ContextMenu": CONTEXT_MENU;
	case "PauseBreak": PAUSE_BREAK;
	case "CapsLock": CAPS_LOCK;
	case "ScrollLock": SCROLL_LOCK;
	case "NumLock": NUM_LOCK;
	case "MouseLeft": MOUSE_LEFT;
	case "MouseMiddle": MOUSE_MIDDLE;
	case "MouseRight": MOUSE_RIGHT;
	case "Mouse3": MOUSE_BACK;
	case "Mouse4": MOUSE_FORWARD;
	default:
	    if(StringTools.contains(i, "NumPad")) {
	        NUMPAD_0 + Std.Int(i.charAt(6));
	    }
	    else if( i.charAt(0) == "F") {
	        F1 + Std.Int(i.substr(1, 2));
	    }
	    else if( c.length == 1 ) {
		String.fromCharCode("A".code + c - A);
	    }
	    else
		null;
	}
    }
}

//PARAM=-lib domkit
class Main extends hxd.App {

    var center : h2d.Flow;
    var style = null;
    var socket : sys.net.Socket;
    var connected : Bool;
    var report_desc : Array<Int>;
    var controller : ControllerState;
    var funcs : Map<String,Dynamic>;

    function onClose():Bool {
	socket.close();
	return true;
    }
    
    override function init() {
	hxd.Window.getInstance().onClose = this.onClose;
	controller = new ControllerState();
	socket = new sys.net.Socket();
	socket.setFastSend(true);
	center = new h2d.Flow(s2d);
	center.horizontalAlign = center.verticalAlign = Middle;
	onResize();
	var root = new ContainerComp(Right, center);

	// Override
	root.btn.label = "Connect to Host";
	root.host.backgroundColor = 0xffffff;

	root.btn.onClick = function() {
	    try {
		var host = new sys.net.Host(${root.host.text});
		socket.connect(host, 8080);
		socket.write(controller.encode());
		trace('Connected to $host:8080');
		connected = true;
	    }
	    catch(e) {
		trace(e.message);
	    }
	}
		
	style = new h2d.domkit.Style();
	style.load(hxd.Res.style);
	style.addObject(root);

	funcs;
    }

    override function onResize() {
	center.minWidth = center.maxWidth = s2d.width;
	center.minHeight = center.maxHeight = s2d.height;
    }

    override function update(dt:Float) {
	style.sync();
	if(connected) {
	    
	}
    }

    static function main() {
	#if hl
	    hxd.res.Resource.LIVE_UPDATE = true;
	hxd.Res.initLocal();
	#else
	    hxd.Res.initEmbed();
	#end
	    new Main();
    }

}


class ControllerState {
    public var a : Bool;
    public var b : Bool;
    public var x : Bool;
    public var y : Bool;
    public var l : Bool;
    public var r : Bool;
    public var zl : Bool;
    public var zr : Bool;
    public var home : Bool;
    public var capture : Bool;
    public var plus : Bool;
    public var minus : Bool;
    public var l_stick : JoystickState;
    public var r_stick : JoystickState;
    public var dpad : HatStickState;

    public function new(?a = false, ?b = false, ?x = false, ?y = false, ?l = false, ?r = false, ?zl = false, ?zr = false, ?home = false, ?capture = false, ?plus = false, ?minus = false) {
	this.a = a;
	this.b = b;
	this.x = x;
	this.y = y;
	this.l = l;
	this.r = r;
	this.zl = zl;
	this.zr = zr;
	this.home = home;
	this.capture = capture;
	this.plus = plus;
	this.minus = minus;
	this.l_stick = new JoystickState();
	this.r_stick = new JoystickState();
	this.dpad = new HatStickState();
    }

    function fromArray(values:Array<Bool>):String {
	var val : Int = 0x00;
	for(i in 0...values.length) {
	    val |= values[i] ? 1<<i : 0;
	}
	return String.fromCharCode(val);
    }

    function fromAxis(axis:Float) : String {
	return String.fromCharCode(Std.int(axis * 0x7f + 0x7f));
    }
    
    public function encode():String {
	var byte1 = fromArray([y,b,a,x,l,r,zl,zr]);
	var byte2 = fromArray([minus, plus, l_stick.clicked, r_stick.clicked, home, capture]);
	var byte3 = dpad.encode();
	var byte4 = fromAxis(l_stick.axisX);
	var byte5 = fromAxis(l_stick.axisY);
	var byte6 = fromAxis(r_stick.axisX);
	var byte7 = fromAxis(r_stick.axisY);
	var byte8 = String.fromCharCode(0);

	return byte1 + byte2 + byte3 + byte4 + byte5 + byte6 + byte7 + byte8;
    }
}

class JoystickState {
    public var axisX : Float;
    public var axisY : Float;
    public var clicked : Bool;

    public function new(?axisX = 0, ?axisY = 0, ?clicked = false) {
	this.axisX = axisX;
	this.axisY = axisY;
	this.clicked = clicked;
    }
}

enum HatStickHorizontalState {
    LEFT;
    RIGHT;
}

enum HatStickVerticalState {
    UP;
    DOWN;
}

class HatStickState {
    public var horizontal : Null<HatStickHorizontalState>;
    public var vertical : Null<HatStickVerticalState>;

    public function new(?horizontal = null, ?vertical = null) {
	this.horizontal = horizontal;
	this.vertical = vertical;
    }

    public function encode():String {
	var retVal : Int = 0x00;
	
        if(horizontal == null && vertical == UP) {
	    retVal = 0x0;
	}
	else if(horizontal == RIGHT && vertical == UP) {
	    retVal = 0x1;
	}
	else if(horizontal == RIGHT && vertical == null) {
	    retVal = 0x2;
	}
	else if(horizontal == RIGHT && vertical == DOWN) {
	    retVal = 0x3;
	}
	else if(horizontal == null && vertical == DOWN) {
	    retVal = 0x4;
	}
	else if(horizontal == LEFT && vertical == DOWN) {
	    retVal = 0x5;
	}
	else if(horizontal == LEFT && vertical == null) {
	    retVal = 0x6;
	}
	else if(horizontal == LEFT && vertical == UP) {
	    retVal = 0x7;
	}
	else {
	    retVal = 0xf;
	}

	return String.fromCharCode(retVal);
    }
}

    

    


    
